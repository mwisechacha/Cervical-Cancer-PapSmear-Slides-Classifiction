{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2017694,"sourceType":"datasetVersion","datasetId":1207662}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Cervical Cancer Classification using Pap Smear Slides\n\nData source: Kaggle.com ~ https://www.kaggle.com/datasets/prahladmehandiratta/cervical-cancer-largest-dataset-sipakmed\n\nThe SIPaKMeD Database consists of 4049 images of isolated cells that have been manually cropped from 966 cluster cell images of Pap smear slides. These images were acquired through a CCD camera adapted to an optical microscope. The cell images are divided into five categories containing normal, abnormal and benign cells.","metadata":{}},{"cell_type":"code","source":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cv2\nimport os\n\nfrom tqdm import tqdm\nimport random\nfrom skimage.feature import local_binary_pattern\nimport time\nimport shutil\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:00.082814Z","iopub.execute_input":"2025-06-30T12:02:00.083830Z","iopub.status.idle":"2025-06-30T12:02:00.089243Z","shell.execute_reply.started":"2025-06-30T12:02:00.083798Z","shell.execute_reply":"2025-06-30T12:02:00.087916Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## Load data","metadata":{}},{"cell_type":"code","source":"# load data\nbase_dir = \"/kaggle/input/cervical-cancer-largest-dataset-sipakmed\"\ncropped_dirs = {\n    cls: os.path.join(base_dir, cls, cls, \"CROPPED\")\n    for cls in [\"im_Dyskeratotic\", \"im_Metaplastic\", \"im_Koilocytotic\", \"im_Parabasal\", \"im_Superficial-Intermediate\"]\n}\nuncropped_dirs = {\n    cls: os.path.join(base_dir, cls, cls)\n    for cls in [\"im_Dyskeratotic\", \"im_Metaplastic\", \"im_Koilocytotic\", \"im_Parabasal\", \"im_Superficial-Intermediate\"]\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:06.915992Z","iopub.execute_input":"2025-06-30T12:02:06.916327Z","iopub.status.idle":"2025-06-30T12:02:06.921876Z","shell.execute_reply.started":"2025-06-30T12:02:06.916303Z","shell.execute_reply":"2025-06-30T12:02:06.920881Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"cropped_dirs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:07.928831Z","iopub.execute_input":"2025-06-30T12:02:07.929937Z","iopub.status.idle":"2025-06-30T12:02:07.936693Z","shell.execute_reply.started":"2025-06-30T12:02:07.929902Z","shell.execute_reply":"2025-06-30T12:02:07.935663Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"{'im_Dyskeratotic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Dyskeratotic/im_Dyskeratotic/CROPPED',\n 'im_Metaplastic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Metaplastic/im_Metaplastic/CROPPED',\n 'im_Koilocytotic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Koilocytotic/im_Koilocytotic/CROPPED',\n 'im_Parabasal': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Parabasal/im_Parabasal/CROPPED',\n 'im_Superficial-Intermediate': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Superficial-Intermediate/im_Superficial-Intermediate/CROPPED'}"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"uncropped_dirs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:13.324176Z","iopub.execute_input":"2025-06-30T12:02:13.324498Z","iopub.status.idle":"2025-06-30T12:02:13.330469Z","shell.execute_reply.started":"2025-06-30T12:02:13.324474Z","shell.execute_reply":"2025-06-30T12:02:13.329588Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"{'im_Dyskeratotic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Dyskeratotic/im_Dyskeratotic',\n 'im_Metaplastic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Metaplastic/im_Metaplastic',\n 'im_Koilocytotic': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Koilocytotic/im_Koilocytotic',\n 'im_Parabasal': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Parabasal/im_Parabasal',\n 'im_Superficial-Intermediate': '/kaggle/input/cervical-cancer-largest-dataset-sipakmed/im_Superficial-Intermediate/im_Superficial-Intermediate'}"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# count number of images in .bmp format\ndef count_bmp_files(directory):\n    count = 0\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.lower().endswith('.bmp'):\n                count += 1\n    return count","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:15.156962Z","iopub.execute_input":"2025-06-30T12:02:15.157244Z","iopub.status.idle":"2025-06-30T12:02:15.162110Z","shell.execute_reply.started":"2025-06-30T12:02:15.157224Z","shell.execute_reply":"2025-06-30T12:02:15.161244Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"print(\"Counting .bmp files in cropped directories:\")\nfor cls, path in cropped_dirs.items():\n    count = count_bmp_files(path)\n    print(f\"{cls} cropped images (.bmp): {count}\")\n\nprint(\"\\nCounting .bmp files in uncropped directories:\")\nfor cls, path in uncropped_dirs.items():\n    count = count_bmp_files(path)\n    print(f\"{cls} uncropped images (.bmp): {count}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-30T12:02:15.828308Z","iopub.execute_input":"2025-06-30T12:02:15.828712Z","iopub.status.idle":"2025-06-30T12:02:39.101345Z","shell.execute_reply.started":"2025-06-30T12:02:15.828685Z","shell.execute_reply":"2025-06-30T12:02:39.100047Z"}},"outputs":[{"name":"stdout","text":"Counting .bmp files in cropped directories:\nim_Dyskeratotic cropped images (.bmp): 813\nim_Metaplastic cropped images (.bmp): 793\nim_Koilocytotic cropped images (.bmp): 825\nim_Parabasal cropped images (.bmp): 787\nim_Superficial-Intermediate cropped images (.bmp): 831\n\nCounting .bmp files in uncropped directories:\nim_Dyskeratotic uncropped images (.bmp): 1036\nim_Metaplastic uncropped images (.bmp): 1064\nim_Koilocytotic uncropped images (.bmp): 1063\nim_Parabasal uncropped images (.bmp): 895\nim_Superficial-Intermediate uncropped images (.bmp): 957\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# view sample image\nsample_images = []\n\nfor i in range(6):\n  sample_image_path = os.path.join(cropped_dirs[f\"im_Superficial-Intermediate\"], os.listdir(cropped_dirs[f\"im_Superficial-Intermediate\"])[i])\n  img = cv2.imread(sample_image_path)\n  if img is not None:\n    sample_images.append(img)\n  else:\n    print(f\"Warning: Could not load image from {sample_image_path}\")\n\n# plot image\ndef plot_images(images):\n  if not images: \n    print(\"No images to display.\")\n    return\n  fig, axes = plt.subplots(1, len(images), figsize=(20, 20))\n  if len(images) == 1:\n      axes = [axes]\n  for i, image in enumerate(images):\n    axes[i].imshow(image)\n    axes[i].axis('off')\n  plt.show()\n\nplot_images(sample_images)\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From the above code cells there are different classes of cervical cancer. Here is a brief explanation of what they mean and how they will play a role in a classification task\n\n1. Superficial-Intermediate and Parabasal cells are normal/non-cancerous cells\n2. Metaplastic and Koilocytotic are abnormal cells\n3. Dyskeratotic cells are benign but suspicious precancerous lesions\n","metadata":{}},{"cell_type":"code","source":"# create a new directory consisting of only .bmp files\nsource_base_dir = \"/kaggle/input/cervical-cancer-largest-dataset-sipakmed\"\ndestination_base_dir = \"/kaggle/working/cervical-cancer-bmp\"\n\nclass_names = [\"im_Dyskeratotic\", \"im_Metaplastic\", \"im_Koilocytotic\", \"im_Parabasal\", \"im_Superficial-Intermediate\"]\n\nprint(\"Starting to create new dataset with only .bmp file....\")\n\nfor cls in class_names:\n    print(f\"\\nProcessing class: {cls}\")\n\n    cropped_source_dir = os.path.join(source_base_dir, cls, cls, \"CROPPED\")\n    cropped_destination_dir = os.path.join(destination_base_dir, cls, \"CROPPED\")\n\n    uncropped_source_dir = os.path.join(source_base_dir, cls, cls)\n    uncropped_destination_dir = os.path.join(destination_base_dir, cls)\n\n    os.makedirs(cropped_destination_dir, exist_ok=True)\n    print(f\"Checking cropped source: {os.path.exists(cropped_source_dir)}\")\n    if os.path.exists(cropped_source_dir):\n        print(f\"Cropped source found. Copying .bmp file to {cropped_destination_dir}\")\n        copied_count = 0\n        try:\n            for item in os.listdir(cropped_source_dir):\n                source_item_path = os.path.join(cropped_source_dir, item)\n                destination_item_path = os.path.join(cropped_destination_dir, item)\n                if os.path.isfile(source_item_path) and item.lower().endswith('.bmp'):\n                    try:\n                        shutil.copy2(source_item_path, destination_item_path)\n                        copied_count += 1\n                    except Exception as e:\n                        print(f\"Error copying {item}: {e}\")\n        except Exception as e:\n            print(f\"Error listing cropped source directory {cropped_source_dir}: {e}\")\n\n        print(f\"Finished copying cropped .bmp files for {cls}. Total copied: {copied_count}\")\n    else:\n        print(f\"Cropped source directory not found for {cls}. Skipping\")\n\n\n    os.makedirs(uncropped_destination_dir, exist_ok=True)\n    print(f\"Checking cropped source: {os.path.exists(uncropped_source_dir)}\")\n    if os.path.exists(uncropped_source_dir):\n        print(f\"Uncropped source found. Copying .bmp files to {uncropped_destination_dir}\")\n        copied_count = 0\n        try: \n            for item in os.listdir(uncropped_source_dir):\n                source_item_path = os.path.join(uncropped_source_dir, item)\n                destination_item_path = os.path.join(uncropped_destination_dir, item)\n                if os.path.isfile(source_item_path) and item.lower().endswith('.bmp') and os.path.basename(source_item_path).lower() != 'cropped':\n                    try:\n                        shutil.copy2(source_item_path, destination_item_path)\n                        copied_count += 1\n                    except Exception as e:\n                        print(f\"Error copying {item}: {e}\")\n                elif os.path.isdir(source_item_path) and os.path.basename(source_item_path).lower() == 'cropped':\n                     print(f\"Skipping 'CROPPED' subfolder in uncropped source: {source_item_path}\")\n        except Exception as e:\n             print(f\"Error listing uncropped source directory {uncropped_source_dir}: {e}\")\n\n\n        print(f\"Finished copying uncropped .bmp files for {cls}. Total copied: {copied_count}\")\n    else:\n        print(f\"Uncropped source directory not found for {cls}. Skipping.\")\n\n\nprint(\"\\nFinished creating new dataset.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"shutil.make_archive(\"/kaggle/working/final-cerv-ds\", 'zip', \"/kaggle/working/cervical-cancer-bmp\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Image visualization","metadata":{}},{"cell_type":"code","source":"def visualize_image(image_path):\n    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    print(f\"image shape: {image.shape}\")\n    plt.imshow(image, cmap=\"gray\")\n    plt.title(f\"Original image: {image_path}\")\n    plt.axis(\"off\")\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def visualize_3channel_image(image_path):\n    image = np.load(image_path)\n    \n    main_image = image[:, :, 0]\n    edges = image[:, :, 1]\n    gradient = image[:, :, 2]\n\n    plt.figure(figsize=(15, 5))\n    plt.suptitle(f\"Preprocessed Image: {os.path.basename(image_path)}\")\n\n    plt.subplot(1, 3, 1)\n    plt.imshow(main_image, cmap=\"gray\")\n    plt.title(\"Intensity heatmap\")\n    plt.axis(\"off\")\n\n    plt.subplot(1, 3, 3)\n    plt.imshow(gradient, cmap=\"gray\")\n    plt.title(\"Combined Gradient Magnitude\")\n    plt.axis(\"off\")\n\n    plt.tight_layout()\n    plt.show()\n    ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def visualize_detected_patch(full_image, cropped_image, coordinates, scale):\n    h, w = cropped_image.shape\n    scaled_cropped_image = cv2.resize(cropped_image, None, fx=scale, fy=scale,\n                                     interpolation=cv2.INTER_LINEAR)\n    x, y = coordinates\n    h, w = scaled_cropped_image.shape\n\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(\"Detected Region on Full Image\")\n    plt.imshow(full_image, cmap=\"gray\")\n    plt.gca().add_patch(plt.Rectangle((x, y), w, h, edgecolor='red', facecolor='none',\n                       lw=2))\n    plt.axis(\"off\")\n\n    plt.subplot(1, 2, 2)\n    plt.title(\"Cropped Image\")\n    plt.imshow(cropped_image, cmap=\"gray\")\n    plt.axis(\"off\")\n\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def visualize_sample_from_dir()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}